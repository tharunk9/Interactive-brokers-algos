# -*- coding: utf-8 -*-
"""
Created on Sun June 8 21:05:45 2022

@author: Tharun
Strategy Name: sma crossover 1.0 trial 2

description: For S&P500it uses  sma and stochastic crossover to buy. 
                                stochastic crossover for sell strategy
                                
             1.1: This code uses TA lib to calculate stock and ATR.    
             1:2: function to buy and sell

Notes: Regular trading hours= 0. It implies data from all times
        then days have to be less as the number of observations would increase

"""


# Import libraries
from ibapi.client import EClient
from ibapi.wrapper import EWrapper
from ibapi.contract import Contract
from ibapi.order import Order
import pandas as pd
import threading
import time
from copy import deepcopy
import numpy as np
import matplotlib
import talib as ta



class TradeApp(EWrapper, EClient): 
    def __init__(self): 
        EClient.__init__(self, self) 
        self.data = {}
        self.pos_df = pd.DataFrame(columns=['Account', 'Symbol', 'SecType',
                                    'Currency', 'Position', 'Avg cost'])
        self.order_df = pd.DataFrame(columns=['PermId', 'ClientId', 'OrderId',
                                          'Account', 'Symbol', 'SecType',
                                          'Exchange', 'Action', 'OrderType',
                                          'TotalQty', 'CashQty', 'LmtPrice',
                                          'AuxPrice', 'Status'])
        
    def historicalData(self, reqId, bar):
        #print(f'Time: {bar.date}, Open: {bar.open}, Close: {bar.close}')
        if reqId not in self.data:
            self.data[reqId] = [{"Date":bar.date,"Open":bar.open,"High":bar.high,"Low":bar.low,"Close":bar.close,"Volume":bar.volume}]
        else:
            self.data[reqId].append({"Date":bar.date,"Open":bar.open,"High":bar.high,"Low":bar.low,"Close":bar.close,"Volume":bar.volume})

    def nextValidId(self, orderId):
        super().nextValidId(orderId)
        self.nextValidOrderId = orderId
        print("NextValidId:", orderId)
        
    def position(self, account, contract, position, avgCost):
        super().position(account, contract, position, avgCost)
        dictionary = {"Account":account, "Symbol": contract.symbol, "SecType": contract.secType,
                      "Currency": contract.currency, "Position": position, "Avg cost": avgCost}
        self.pos_df = self.pos_df.append(dictionary, ignore_index=True)
        
    def positionEnd(self):
        print("Latest position data extracted")
        
    def openOrder(self, orderId, contract, order, orderState):
        super().openOrder(orderId, contract, order, orderState)
        dictionary = {"PermId":order.permId, "ClientId": order.clientId, "OrderId": orderId, 
                      "Account": order.account, "Symbol": contract.symbol, "SecType": contract.secType,
                      "Exchange": contract.exchange, "Action": order.action, "OrderType": order.orderType,
                      "TotalQty": order.totalQuantity, "CashQty": order.cashQty, 
                      "LmtPrice": order.lmtPrice, "AuxPrice": order.auxPrice, "Status": orderState.status}
        self.order_df = self.order_df.append(dictionary, ignore_index=True)
        



def snp_futures(symbol, exp_date = "202206", sec_type="FUT",currency="USD",exchange="GLOBEX"):
    contract = Contract()
    contract.symbol = symbol
    contract.secType = sec_type
    contract.currency = currency
    contract.exchange = exchange
    contract.lastTradeDateOrContractMonth = exp_date
    return contract



def histData(req_num,contract,duration,candle_size):
    """extracts historical data"""
    app.reqHistoricalData(reqId=req_num, 
                          contract=contract,
                          endDateTime='',
                          durationStr=duration,
                          barSizeSetting=candle_size,
                          whatToShow='ADJUSTED_LAST',
                          useRTH=0,
                          formatDate=1,
                          keepUpToDate=0,
                          chartOptions=[])	 # EClient function to request contract details


def websocket_con():
    app.run()

app = TradeApp()
app.connect(host='127.0.0.1', port=7497, clientId=23) #port 4002 for ib gateway paper trading/7497 for TWS paper trading/ 7496 for live trading
con_thread = threading.Thread(target=websocket_con, daemon=True)
con_thread.start()

tickers = ["MES"]


###################storing trade app object in dataframe#######################
def dataDataframe(TradeApp_obj,symbols, symbol):
    "returns extracted historical data in dataframe format"
    df = pd.DataFrame(TradeApp_obj.data[symbols.index(symbol)])
    df.set_index("Date",inplace=True)
    return df


def stochOscltr(DF,fastk=5, slowk=3, slowd=3):
    """function to calculate Stochastics"""
    df = DF.copy()
    df['K'], df['D'] = ta.STOCH(df['High'], df['Low'], df['Close'], 
                       fastk_period=fastk, slowk_period= slowk, slowd_period = slowd, 
                       slowk_matype=0, slowd_matype=0)
    
    return df['K'], df['D']



def lin_reg(DF, timeperiod=9):
    """function to calculate linear regression"""
    df = DF.copy()
    df['reg'] = ta.LINEARREG(df['Close'], timeperiod=timeperiod)
    df['reg_angle'] = ta.LINEARREG_ANGLE(df['Close'], timeperiod=timeperiod)
    df['reg_slope'] = ta.LINEARREG_SLOPE(df['Close'], timeperiod=timeperiod)
    
    return df['reg'], df['reg_slope']


def psar(DF,acceleration=0.02, maximum=0.2):
       df = DF.copy()       
       df['SAR'] = ta.SAR(df['High'], df["Low"], acceleration= acceleration, maximum= maximum)
       return df['SAR']

def ema(DF, timeperiod=21):
    """function to calculate Exponential moving avg"""
    df = DF.copy()
    df['ema'] = ta.EMA(df['Close'], timeperiod=timeperiod)

    return df['ema']

def MACD(DF,a=12,b=26,c=9):
    """function to calculate MACD"""
    
    df = DF.copy()
    df["MACD"], df["Signal"], df["macd_hist"] = ta.MACD(df['Close'], fastperiod= a, slowperiod= b, signalperiod= c)
    df.dropna(inplace=True)
    
    return df["MACD"], df["Signal"]


def atr(DF,n=20):
    "function to calculate True Range and Average True Range"
    df = DF.copy()
    tp_atr = ta.ATR(df['High'], df["Low"], df["Close"], timeperiod= n)
    df["ATR"]  = round(tp_atr)+ 0.5
    return df['ATR']



def marketOrder(direction,quantity):
    order = Order()
    order.action = direction
    order.orderType = "MKT"
    order.totalQuantity = quantity
    order.tif = "DAY"
    order.eTradeOnly = False
    order.firmQuoteOnly = False
    return order

def stopOrder(direction,quantity,st_price):
    order = Order()
    order.action = direction
    order.orderType = "STP"
    order.totalQuantity = quantity
    order.auxPrice = st_price
    return order




def buy_cond(DF, app, ticker):
    
    df = DF.copy()
    quantity = 2
    
    
    if df['reg'][-1]> df["ema"][-1]: 
           
           app.reqIds(-1)
           time.sleep(2)
           order_id = app.nextValidOrderId
           app.placeOrder(order_id,snp_futures(ticker),marketOrder("BUY",quantity))
           time.sleep(5)
           
def sell_cond(DF, app, ticker):
           
    psar_stop = round(df["sar"][-1])- 0.5
    ema_stop = round(df["ema"][-1]) + 0.5
    reg_stop = round(df['reg'][-1]) + 0.5
    
    
    if reg_stop >= psar_stop:
        st_price = psar_stop
        
    elif reg_stop < psar_stop:
        st_price = ema_stop
    
    
    order_id = app.nextValidOrderId
    app.placeOrder(order_id+1,snp_futures(ticker), stopOrder("SELL",quantity,st_price ))
  

              
           
    

def main():
    app.data = {}
    app.pos_df = pd.DataFrame(columns=['Account', 'Symbol', 'SecType',
                            'Currency', 'Position', 'Avg cost'])
    app.order_df = pd.DataFrame(columns=['PermId', 'ClientId', 'OrderId',
                                      'Account', 'Symbol', 'SecType',
                                      'Exchange', 'Action', 'OrderType',
                                      'TotalQty', 'CashQty', 'LmtPrice',
                                      'AuxPrice', 'Status'])
    app.reqPositions()
    time.sleep(2)
    
    pos_df = app.pos_df
    pos_df.drop_duplicates(inplace=True,ignore_index=True) # position callback tends to give duplicate values
    app.reqOpenOrders()
    time.sleep(2)
    
    ord_df = app.order_df
    
    

    for ticker in tickers:
        
        print("starting passthrough for.....",ticker)
        print("Latest data time:", time.strftime("%H:%M:%S", time.localtime(time.time())))
        histData(tickers.index(ticker),snp_futures(ticker),'2 D', '5 mins')
        time.sleep(5)
        
        # Create te dataset
        df = dataDataframe(app,tickers,ticker)
        # df['K'], df['D'] = stochOscltr(df)
        df["ema"] = ema(df, timeperiod=21)
        df['reg'], df['reg_slope'] = lin_reg(df, timeperiod=9)
        # df["MACD"], df["Signal"] = MACD(df,a=12,b=26,c=9)
        # df["atr"] = atr(df,60)
        df["sar"] = psar(df,acceleration=0.02, maximum=0.2)
        
        df.dropna(inplace=True)
        print("Dataset Created")
        
        quantity = 2
        
        if quantity == 0:
            continue
        
        if len(pos_df.columns)==0:
            
            if buy_cond(df, app, ticker):
                    sell_cond(df, app, ticker)

          
        elif len(pos_df.columns)!=0 and ticker not in pos_df["Symbol"].tolist():
            
            if buy_cond(df, app, ticker):
                    sell_cond(df, app, ticker)
           
                    
         # the ticker name is in traded orders but no positions          
        elif len(pos_df.columns)!=0 and ticker in pos_df["Symbol"].tolist():
            
            if pos_df[pos_df["Symbol"]==ticker]["Position"].sort_values(ascending=True).values[-1] == 0:
                
                if buy_cond(df, app, ticker):
                    sell_cond(df, app, ticker)
                               
                

#extract and store historical data in dataframe repetitively
starttime = time.time()
timeout = time.time() + 60*60*23

while time.time() <= timeout:
    main()
    time.sleep(300 - ((time.time() - starttime) % 300.0))
    
    
    
    
    
    
    
    
    
    
